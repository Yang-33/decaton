/*
 * Copyright 2025 LY Corporation
 *
 * LY Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

plugins {
    id 'java'
}

ext {
    noPublish = true
    jacksonVersion = "2.17.0"
    slf4jVersion = "2.0.12"
    jsonSchemaGeneratorVersion = "4.38.0"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

// disable shadowJar task. This tool just runs the main class to generate JSON schemas in your local.
plugins.withId('com.github.johnrengelman.shadow') {
    tasks.named('shadowJar').configure { enabled = false }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(":processor")

    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.github.victools:jsonschema-generator:$jsonSchemaGeneratorVersion"
    runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

def schemaOutDir = file("$projectDir/dist")

tasks.register('generateProcessorSchemas', JavaExec) {
    group = 'generation'
    description = 'Generate Decaton ProcessorProperties JSON Schemas'

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('com.linecorp.decaton.jsonschema.ProcessorPropertiesSchemaGenerator')
    jvmArgs(
            "-Dorg.slf4j.simpleLogger.logFile=System.out",
            "-Dorg.slf4j.simpleLogger.defaultLogLevel=info"
    )
    logging.captureStandardOutput LogLevel.LIFECYCLE

    args schemaOutDir.absolutePath

    outputs.dir schemaOutDir
}

tasks.named('build') {
    dependsOn 'generateProcessorSchemas'
}

tasks.named('clean') {
    doFirst { delete schemaOutDir }
}